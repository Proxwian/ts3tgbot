'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TeamSpeakListener = TeamSpeakListener;
function TeamSpeakListener() {
  'use strict';

  var TeamSpeakClient = require("node-teamspeak"), util = require("util");;
  var TelegramBot = require('node-telegram-bot-api');
  var mongoose = require('mongoose');
  var fs = require('fs');

  var parsedJson = JSON.parse(fs.readFileSync('settings.json', 'utf8'));

  const guideText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ fuckdiscord.ru! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ–º, –∫–∞–∫ —Ç—É—Ç –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n1) –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –≤–∞–π—Ç–ª–∏—Å—Ç (/whitelist) –∏–ª–∏ –±–ª—ç–∫–ª–∏—Å—Ç (/blacklist)\n2) –ó–∞—Ç–µ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π /sub <id –∏–ª–∏ –Ω–∏–∫>. –ù–∏–∫–∏ –∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–Ω–æ –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /users\n3) –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Ç–∞–∫–∏–º –∂–µ –æ–±—Ä–∞–∑–æ–º, –∫–æ–º–∞–Ω–¥–æ–π /me <id –∏–ª–∏ –Ω–∏–∫>, —á—Ç–æ–±—ã —è –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–ª –≤–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –ø–æ–∫–∞ –≤—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n4) (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω –∫–æ–º–∞–Ω–¥–æ–π /notify <—á–∏—Å–ª–æ>\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\/connect - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É\n\/who - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –æ–Ω–ª–∞–π–Ω\n\/lastseen <id –∏–ª–∏ –Ω–∏–∫> - –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–Ω–ª–∞–π–Ω\n\/map - –∫–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞\n\/subscriptions - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\/showkeyboard –∏–ª–∏ \/hidekeyboard - —Å–ø—Ä—è—Ç–∞—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥\n\n–ù–∞ —ç—Ç–æ–º –≤—Å—ë! –ë—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ø–∏—à–∏ @proxwian";
  const connectText = "[–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É](http://www.teamspeak.com/invite/teamsp3ak.ru/)";
  // just for lulz
  const f4ckdiscord = '```............\/¬¥¬Ø\/)...........(\\¬Ø\`\\ \n...........\/...\/\/....–°–î–û–•–ù–ò..\\\\...\\ \n........./...//.....–î–ò–°–ö–û–†–î..\\...\\ \n...../¬¥¬Ø/..../¬¥¬Ø\.–ï–ë–ê–ù–´–π../¬Ø` \....\¬Ø`\ \n.././.../..../..../.|_......._|.\....\....\...\.\ \n(.(....(....(..../..)..)......(..(.\....)....)....).) \n.\................\/.../......\...\/................/ \n..\.................. /.........\................../.```';  

  var server = parsedJson.server;
  var port = parsedJson.port;
  var queryPort = parsedJson.queryPort;

  // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
  // 
  var clients = [];
  var online = 0;

  var cl = new TeamSpeakClient(server, queryPort);
  setHandlers();

  function setHandlers() {
    cl.on("error", function (err) {
      cl = new TeamSpeakClient(server, queryPort);
      setHandlers();
      serverNotifyRegister();
      handleEvents();
    });

    cl.on("close", function () {
      cl = new TeamSpeakClient(server, queryPort);
      setHandlers();
      serverNotifyRegister();
      handleEvents();
    });
  }
  var bot = new TelegramBot(parsedJson.botApiKey, { polling: true });

  var subsSchema = new mongoose.Schema({
    "tgUserId": { type: String, index: true },
    "tsUserId": { type: Number, default: 0 },
    "notifyAll": { type: Boolean, default: false },
    "notifyAmount": { type: Number, default: 0 },
    "tsIds": [Number]
  });
  var Subscriptions = mongoose.model('Subscriptions', subsSchema);

  var clientsSchema = new mongoose.Schema({
    "dbid": { type: Number, index: true },
    "curid": { type: Number },
    "power": { type: Number },
    "channel": { type: Number },
    "name": { type: String },
    "online": { type: String },
    "country": { type: String },
    "awayMsg": { type: String }
  });
  var Clients = mongoose.model('bros', clientsSchema);

  const opts = {
    parse_mode: 'Markdown'
  }

  // –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  const kb_hide = {
    parse_mode: 'Markdown',
    reply_markup: JSON.stringify({
      hide_keyboard: true
    })
  };

  const keyboard = {
    parse_mode: 'Markdown',
    reply_markup: JSON.stringify({
      keyboard: [
        ['üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'],
        ['‚ùî –¢—É—Ç–æ—Ä–∏–∞–ª', 'üëΩ –û–Ω–ª–∞–π–Ω', 'üìú –ö–∞—Ä—Ç–∞'],
        ['üìç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üßî –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'],
        ['üëç –í–∞–π—Ç–ª–∏—Å—Ç', 'üñç –ü–æ–¥–ø–∏—Å–∫–∏', 'üëé –ë–ª—ç–∫–ª–∏—Å—Ç']
      ]
    })
  };

  mongoose.connect(parsedJson.mongooseConnection);
  var db = mongoose.connection;
  db.on('error', console.error.bind(console, 'connection error:'));

  db.once('open', function () {
    bot.onText(/^\/start/, function (msg) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { tgUserId: msg.from.id }, { upsert: true }, function (err, result) {
        if (result) {
          bot.sendMessage(msg.from.id, guideText, opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram', opts);
        }
      });
    });

    //–¥–∂–∞—Å—Ç —Ñ–æ—Ä –ª—É–ª–∑
    bot.onText(/.*/, function (msg) {
      if(getRandomInt(0,101) == 101) bot.sendMessage(msg.chat.id, f4ckdiscord, opts);
    });

    function getRandomInt(min, max)
    {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }


    bot.onText(/^\/stop$|^\/stahp$/, function (msg) {
      Subscriptions.remove({ tgUserId: msg.from.id }, function (err) {
        if (!err) {
          bot.sendMessage(msg.from.id, '–û–∫, –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–µ–Ω—è', opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', opts);
        }
      });
    });

    bot.onText(/^\/help$|^\/guide$|^‚ùî –¢—É—Ç–æ—Ä–∏–∞–ª$/, function (msg) {
      bot.sendMessage(msg.chat.id, guideText, opts);
    });

    bot.onText(/^\/connect$|^üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è$/, function (msg) {
      bot.sendMessage(msg.chat.id, connectText, opts);
    });

    bot.onText(/^\/who$|^\/list$|^üëΩ –û–Ω–ª–∞–π–Ω$/, function (msg) {
      var strlist = '';
      Clients.find({ online: "true" }).exec(function (err, result) {
        if (err) {
          return;
        } if (result) {
          var count = 0;
          result.sort(function(a, b){ return a.dbid-b.dbid });
          result.forEach(function (element) {
            count++;
            strlist += "id" + element.dbid + ": *" + element.name + "* \\[" + element.power + "\]";
            if (count != result.length) strlist += "\n";
          });
          var str = '';
          switch(count) {
            case 2:
              str = ' —á–µ–ª–æ–≤–µ–∫–∞';
              break;
            case 3:
              str = ' —á–µ–ª–æ–≤–µ–∫–∞';
              break;
            case 4:
              str = ' —á–µ–ª–æ–≤–µ–∫–∞';
              break;
            default:
              str = ' —á–µ–ª–æ–≤–µ–∫';
            }
          if (count > 0) {
            bot.sendMessage(msg.chat.id, "–°–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ *" + count + str +"*:\n\n" + strlist, opts);
          } else {
            bot.sendMessage(msg.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –æ–Ω–ª–∞–π–Ω –Ω–µ—Ç...", opts);
          }
        }
      });
    });

    bot.onText(/^\/whoall$|^\/listall$|^\/users$|^üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏$/, function (msg) {
      var strlist = '';
      var i = 0;
      Clients.find().exec(function (err, result) {
          if (err) {
            bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î \*_\*", opts);
            return;
          } 
          if (result) {
            result.sort(function(a, b){ return a.dbid-b.dbid });
            result.forEach(function (element) {
              if (element.dbid == null) return;
              i++;
              strlist += "id" + element.dbid + ": *" + element.name + "* \\[" + element.power + "\]";
              switch (element.online) {
                case 'true':
                  strlist += " (–û–Ω–ª–∞–π–Ω)";
                  break;
                default:
                  strlist += " (" + timeAgo(element.online) + ")";
              }
              if (i != result.length) strlist += "\n";
            });
            bot.sendMessage(msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (" + i + "): \n\n" + strlist, opts);
          }
        });
    });

    bot.onText(/^\/lastseen (.+)/, function (msg, args) {
      Clients.find({ name: args[1].valueOf() }).exec(function (err, result) {
          if (err) {
            bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ *_*", opts);
            return;
          } if (result) {
            result.forEach(function (element) {
              var str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + element.name + '*(id' + element.dbid + ')';
              switch (element.online) {
                case 'true':
                  str += " —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω";
                  break;
                default:
                  str += " –±—ã–ª –æ–Ω–ª–∞–π–Ω " + timeAgo(element.online);
              }
              bot.sendMessage(msg.chat.id, str, opts);
            });
            if (result.length < 1) {
              Clients.find({ dbid: args[1] }).exec(function (err, result) {
                if (err) {
                  bot.sendMessage(msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –∏–ª–∏ id –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å", opts);
                  return;
                } if (result) {
                  result.forEach(function (element) {
                    var str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + element.name + '*(id' + element.dbid + ')';
                    switch (element.online) {
                      case 'true':
                        str += " —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω";
                        break;
                      default:
                        str += " –±—ã–ª –æ–Ω–ª–∞–π–Ω " + timeAgo(element.online);
                    }
                    bot.sendMessage(msg.chat.id, str, opts);
                  });
                  if (result.length < 1) bot.sendMessage(msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –∏–ª–∏ id –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å", opts);
                }
              });
            }
          }
      });
    });

    bot.onText(/^\/tree$|^\/map$|^üìú –ö–∞—Ä—Ç–∞$/, function (msg) {
      updatePositions();

      var tree = '';
      cl.send("use", {sid: 1}, function(err, resp, rawResponse){
        cl.send("channellist", function(err, resp, rawResponse){
          Clients.find({ online: "true" }).exec(function (err, clientList) {
            if (err) {
              return;
            } if (clientList) {
              //clientList.sort(function(a, b){ return a.power-b.power });
  
              resp.forEach(function(element) {
                var count = 0;
                var stroke = '';
                var ch_clients = [];
    
                function getChClients(e) {
                  return e.channel == element.cid;
                }
    
                ch_clients = clientList.filter(getChClients);
                //ch_clients = clientList;

                if(!element.channel_name.includes("#") && element.channel_needed_subscribe_power < 999) {
                  stroke += "\\_\\_";
                }

                ch_clients.forEach(function(client) {
                  count++;
                });
    
                // —Å–∫—Ä—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
                if (element.total_clients < 0) {
                  if (element.channel_needed_subscribe_power < 999) {
                    if (element.channel_needed_subscribe_power < 80) {
                      stroke += "*" + element.channel_name + "* (?)\n";
                    } else {
                      stroke += "*" + element.channel_name + "*\n";
                    }
                  }
                } else {
                  stroke += "*" + element.channel_name + "*" + " (" + count + ")\n";
                }
                //

                ch_clients.forEach(function(client) {
                  stroke += "  [ ] _" + client.name + "_ \\[" + client.power + "\]\n";
                });
                tree += stroke;
              })

              bot.sendMessage(msg.chat.id, tree, opts);
            }
          });
        });
      });
    });

    bot.onText(/^\/whitelist$|^\/unsubscribeall$|^üëç –í–∞–π—Ç–ª–∏—Å—Ç$/, function (msg) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { notifyAll: false }, function (err, result) {
        if (result) {
          bot.sendMessage(msg.from.id, '–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º *–≤–∞–π—Ç-–ª–∏—Å—Ç–∞*. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å *—Ç–æ–ª—å–∫–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã*', opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', opts);
        }
      });
    });

    bot.onText(/^\/blacklist$|^\/subscribeall$|^üëé –ë–ª—ç–∫–ª–∏—Å—Ç$/, function (msg) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { notifyAll: true }, function (err, result) {
        if (result) {
          bot.sendMessage(msg.from.id, '–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º *—á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞*. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, *–∫—Ä–æ–º–µ —Ç–µ—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã*', opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', opts);
        }
      });
    });

    bot.onText(/^\/sub (.+)/, function (msg, args) {
      Clients.find({ name: args[1].valueOf() }).exec(function (e, r) {
        if (e) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
        }
        if (r) {
          var user;
            switch (r.length) {
              case 1:
                user = r[0];
                Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $addToSet: { tsIds: user.dbid } }, function (er, res) {
                  if (er) {
                    bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                  }
                  if (res) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + user.name + '*(id' + user.dbid + ') –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏', opts);
                  }
                });
                break;
              default:
                Clients.find({ dbid: args[1].valueOf() }).exec(function (err, result) {
                  if (err) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω...', opts);
                  }
                  if (result) {
                    if (result.length) {
                      if (result.length < 1) {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                      } else {
                        user = result[0];
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $addToSet: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + user.name + '*(id' + user.dbid + ') –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏', opts);
                          }
                        });
                      }
                    } else {
                      user = result;
                      if (user.dbid != null && user.dbid != undefined) {
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $addToSet: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aga)', opts);
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + user.name + '*(id' + user.dbid + ') –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏', opts);
                          }
                        });
                      } else {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                      }
                    }
                  }
                });
            }
        }
      });
    });

    bot.onText(/^\/subscribe$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /subscribe', opts);
    });

    bot.onText(/^\/sub$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /sub', opts);
    });

    bot.onText(/^\/me$|^üßî –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç$/, function (msg) {
      Subscriptions.findOne({ tgUserId: msg.from.id }).exec(function (e, r) {
        if (e) {

        }
        if (r) {
          if (r.tsUserId == 0) {
            bot.sendMessage(msg.from.id, '–í—ã –ø–æ–∫–∞ –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Teamspeak. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ª–∏—á–Ω–æ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ /me <id>', opts);
            return;
          } else {
            Clients.findOne({ dbid: r.tsUserId }).exec(function (e, r) {
              if (e) {

              }
              if (r) {
                bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *' + r.name + '*(id' + r.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω. –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π */me off*', opts);
              }
            });
          }
        }
      });
    });

    bot.onText(/^\/me (.+)/, function (msg, args) {
      switch (args[1]) {
        case 'off':
          Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { tsUserId: 0 } }, function (er, res) {
            if (er) {
              bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
            }
            if (res) {
              bot.sendMessage(msg.from.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ */me <id –∏–ª–∏ –Ω–∏–∫>*', opts);
            }
          });
          break;
        default:
          Clients.find({ name: args[1].valueOf() }).exec(function (e, r) {
            if (e) {
              bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
            }
            if (r) {
              var user;
                switch (r.length) {
                  case 1:
                    user = r[0];
                    Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { tsUserId: user.dbid } }, function (er, res) {
                      if (er) {
                        bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                      }
                      if (res) {
                        bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *' + user.name + '*(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω. –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π */me off*', opts);
                      }
                    });
                    break;
                  default:
                    Clients.find({ dbid: args[1].valueOf() }).exec(function (err, result) {
                      if (err) {
                        bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *' + user.name + '*(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω', opts);
                      }
                      if (result) {
                        if (result.length) {
                          if (result.length < 1) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                          } else {
                            user = result[0];
                            Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { tsUserId: user.dbid } }, function (er, res) {
                              if (er) {
                                bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                              }
                              if (res) {
                                bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *' + user.name + '*(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω', opts);
                              }
                            });
                          }
                        } else {
                          user = result;
                          if (user.dbid != null && user.dbid != undefined) {
                            Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { tsUserId: user.dbid } }, function (er, res) {
                              if (er) {
                                bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aga)', opts);
                              }
                              if (res) {
                                bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *' + user.name + '*(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω', opts);
                              }
                            });
                          } else {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                          }
                        }
                      }
                    });
                }
            }
          });
      }
      
    });

    bot.onText(/^\/unsub (.+)/, function (msg, args) {
      Clients.find({ name: args[1].valueOf() }).exec(function (e, r) {
        if (e) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
        }
        if (r) {
          var user;
            switch (r.length) {
              case 1:
                user = r[0];
                Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $pull: { tsIds: user.dbid } }, function (er, res) {
                  if (er) {
                    bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                  }
                  if (res) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + user.name + '*(id' + user.dbid + ') —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫', opts);
                  }
                });
                break;
              default:
                Clients.find({ dbid: args[1].valueOf() }).exec(function (err, result) {
                  if (err) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω...', opts);
                  }
                  if (result) {
                    if (result.length) {
                      if (result.length < 1) {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                      } else {
                        user = result[0];
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $pull: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + user.name + '*(id' + user.dbid + ') —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫', opts);
                          }
                        });
                      }
                    } else {
                      user = result;
                      if (user.dbid != null && user.dbid != undefined) {
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $pull: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aga)', opts);
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *' + user.name + '*(id' + user.dbid + ') —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫', opts);
                          }
                        });
                      } else {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id *' + args[1] + '* –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                      }
                    }
                  }
                });
            }
        }
      });
    });

    bot.onText(/^\/unsubscribe$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ –Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unsubscribe', opts);
    });

    bot.onText(/^\/lastseen$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ –Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /lastseen', opts);
    });
  
    bot.onText(/^\/unsub$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ –Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unsub', opts);
    });
  
    bot.onText(/^\/notify$|üìç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$/, function (msg) {
      Subscriptions.findOne({ tgUserId: msg.from.id }, function (error, result) {
        if (error) {
          bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞ –ë–î', opts);
        }
        if (result) {
          switch(result.notifyAmount) {
            case 0:
              bot.sendMessage(msg.from.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–µ–ª–æ–≤–µ–∫ –æ–Ω–ª–∞–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ */notify <—á–∏—Å–ª–æ>*, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å', opts);
              break;
            default:
              bot.sendMessage(msg.from.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–µ–ª–æ–≤–µ–∫ –æ–Ω–ª–∞–π–Ω: *' + result.notifyAmount + '*\n–í–≤–µ–¥–∏—Ç–µ */notify off*, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å', opts);
          }
          
        }
      });
    });
  
    bot.onText(/^\/notify (.+)/, function (msg, args) {
      switch (args[1]) {
        case 'off':
          Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { notifyAmount: 0 } }, function (error, result) {
            if (error) {
              bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞ –ë–î', opts);
            }
            if (result) {
              bot.sendMessage(msg.from.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–µ–ª–æ–≤–µ–∫ –æ–Ω–ª–∞–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω—ã', opts);
            }
          });
          break;
        default:
          Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { notifyAmount: args[1] } }, function (error, result) {
            if (error) {
              bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ', opts);
            }
            if (result) {
              bot.sendMessage(msg.from.id, '–•–æ—Ä–æ—à–æ, —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ–Ω–ª–∞–π–Ω–µ, –∫–æ–≥–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ *' + args[1] + '* —á–µ–ª–æ–≤–µ–∫(–∞)', opts);
            }
          });
      }
    });

    bot.onText(/^\/showkeyboard$/, function (msg, args) {
      bot.sendMessage(msg.from.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ *–≤–∫–ª—é—á–µ–Ω–∞*', keyboard);
    });

    bot.onText(/^\/hidekeyboard$/, function (msg, args) {
      bot.sendMessage(msg.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ *–æ—Ç–∫–ª—é—á–µ–Ω–∞*', kb_hide);
    });
  
    bot.onText(/^\/mode$|^üëÅ –†–µ–∂–∏–º$/, function (msg) {
      Subscriptions.findOne({ tgUserId: msg.from.id }, function (err, result) {
        if (result) {
          (function () {
            if (result.notifyAll == true) {
              bot.sendMessage(msg.from.id, '–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º *—á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞*. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, *–∫—Ä–æ–º–µ —Ç–µ—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã*', opts);
            } else {
              bot.sendMessage(msg.from.id, '–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º *–≤–∞–π—Ç-–ª–∏—Å—Ç–∞*. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å *—Ç–æ–ª—å–∫–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã*', opts);
            }
          })();
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î', opts);
        }
      });
    });
  
    bot.onText(/^\/subscriptions$|^üñç –ü–æ–¥–ø–∏—Å–∫–∏$/, function (msg) {
      Subscriptions.findOne({ tgUserId: msg.from.id }, function (err, result) {
        if (result) {
          Clients.find().exec(function (er, res) {
            if (er) {
  
            }
            if (res) {
              var subscriptions = "";
              var i = 1;
              result.tsIds.forEach(function (element) {
                var name = '';
                res.forEach(function (unit) {
                  if (unit.dbid == element) {
                    name = unit.name;
                  }
                });
                subscriptions = subscriptions + i + ") id" + element + ": *" + name + "*\n";
                i++;
              });
              var self = result.tsUserId;
              if (self > 0) self = 'id' + self; else self = '–ù–µ —É–∫–∞–∑–∞–Ω';
              if (subscriptions) {
                if (result.notifyAll) {
                  bot.sendMessage(msg.from.id, '–ü–æ–¥–ø–∏—Å–∫–∏ (—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫):  \n' + subscriptions + '\n–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: *' + self + '*', opts);
                } else {
                  bot.sendMessage(msg.from.id, '–ü–æ–¥–ø–∏—Å–∫–∏ (–≤–∞–π—Ç-–ª–∏—Å—Ç):  \n' + subscriptions + '\n–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: *' + self + '*', opts);
                }
              } else {
                if (result.notifyAll) {
                  bot.sendMessage(msg.from.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ :—Å (—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫):  \n' + subscriptions + '\n–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: *' + self + '*', opts);
                } else {
                  bot.sendMessage(msg.from.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ :—Å (–≤–∞–π—Ç-–ª–∏—Å—Ç):  \n' + subscriptions + '\n–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: *' + self + '*', opts);
                }
              }
            }
          });
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î', opts);
        }
      });
    });
  });

  serverNotifyRegister();
  handleEvents();
  resetOnlines();

  function serverNotifyRegister() {
    cl.send("use", { port: port || 9987 }, function () {
      cl.send("servernotifyregister", { event: "server" }, function () {});
      cl.send("servernotifyregister", { event: "textprivate" }, function () {});
      cl.send("servernotifyregister", { event: "clientmove" }, function () {});
      cl.send("servernotifyregister", { event: "clientmoved" }, function () {});
    });
  }

  function userJoin(resp) {
    Clients.findOneAndUpdate({ dbid: resp.client_database_id }, { $set: { curid: resp.clid, name: resp.client_nickname, online: 'true', country: resp.client_country, power: resp.client_talk_power, channel: resp.ctid, awayMsg: resp.client_away_message } }, { upsert: true }, function (err, result) {
      });
  }

  function userLoad(resp) {
    Clients.findOneAndUpdate({ dbid: resp.client_database_id }, { $set: { curid: resp.clid, name: resp.client_nickname, online: 'true' } }, { upsert: true }, function (err, result) {
      });
  }

  function userUpdate(resp) {
    Clients.findOneAndUpdate({ dbid: resp.client_database_id }, { $set: { channel: resp.cid } }, { upsert: true }, function (err, result) {
      });
  }

  function userLeft(resp) {
    Clients.findOneAndUpdate({ curid: resp.clid }, { $set: { online: new Date(), curid: null } }, function (err, result) {
      });
  }

  function getClientList() {
    clients = [];
    cl.send("use", {sid: 1}, function(err, resp, rawResponse){
      cl.send("clientlist", function(err, resp, rawResponse){
        if (Array.isArray(resp)) {
          resp.forEach(function(element) {
            if(element.client_type == 0) {
              userLoad(element);
            }
          });
        } else {
          if(resp.client_type == 0) {
            // // disable adding ServerQuery users
            // user(resp, false);
          }
        }
        });
    });
  }

  function updatePositions() {
    cl.send("use", {sid: 1}, function(err, resp, rawResponse){
      cl.send("clientlist", function(err, resp, rawResponse){
        if (Array.isArray(resp)) {
          resp.forEach(function(element) {
            //if(!element.client_nickname.includes("Unknown from")) {
            if(element.client_type == 0) {
              userUpdate(element);
            }
          });
        } else {
          if(resp.client_type == 0) {
            userUpdate(resp);
          }
        }
      });
    });
  }

  function resetOnlines() {
    Clients.find({ online: "true" }).exec(function (err, res) {
      if (err) {
        getClientList();
        return;
      } if (res) {
        if (res.length < 1) getClientList();
        res.forEach(function (element) {
          Clients.findOneAndUpdate({ dbid: element.dbid }, { $set: { online: new Date(), curid: null } }, function (err, result) {
            if (result) {
              if(res[res.length-1].dbid == element.dbid) getClientList();
            }
          });
        });
      }
    });
  }

  function handleEvents() {
    cl.on("cliententerview", function (resp) {
      Clients.find({ online: "true" }).exec(function (err, res) {
        if (err) {
          return;
        } if (res) {
          var count = res.length;
          online = count;
          Subscriptions.find().exec(function (err, result) {
            if (err) {
              return;
            }
            if (result) {
              var onlineids = [];
              res.forEach(function (element) {
                onlineids.push(element.dbid);
              });
                result.forEach(function (element) {
                  // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
                  count++;
                  if (count >= element.notifyAmount && element.notifyAmount != 0) {
                    if(resp.client_database_id != element.tsUserId && onlineids.indexOf(element.tsUserId) == -1) {
                      bot.sendMessage(element.tgUserId, "üîî *–û–Ω–ª–∞–π–Ω*: –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ " + (count-1) + " —á–µ–ª–æ–≤–µ–∫(–∞)", opts);
                    }
                  }
                });
                Subscriptions.find({ $or: [{ tsIds: resp.client_database_id }, { notifyAll: true }, { notifyAll: false }] }).exec(function (err, result) {
                  if (err) {
                    return;
                  } if (result) {
                    result.forEach(function (element) {
                      if (element.notifyAll == false) {
                          // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
                          if (element.tsIds.indexOf(resp.client_database_id) != -1) {
                            if(resp.client_database_id != element.tsUserId && onlineids.indexOf(element.tsUserId) == -1) {
                              bot.sendMessage(element.tgUserId, "‚ûï " + resp.client_country + ": *" + resp.client_nickname + "* (" + resp.client_database_id + ") –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è", opts);
                            }
                          }
                      } else {
                        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        if (element.tsIds.indexOf(resp.client_database_id) == -1) {
                          if(resp.client_database_id != element.tsUserId && onlineids.indexOf(element.tsUserId) == -1) {
                            bot.sendMessage(element.tgUserId, "‚ûï " + resp.client_country + ": *" + resp.client_nickname + "* (id" + resp.client_database_id + ") –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è", opts);
                          }
                        }
                      }
                    });
                  }
                  userJoin(resp);
                });
            }
          });
        }
      });
    });

    cl.on("clientleftview", function (resp) {
      Clients.find({ online: "true" }).exec(function (err, res) {
        if (err) {
          return;
        } if (res) {
          var count = res.length;
          online = count;
          Subscriptions.find().exec(function (err, result) {
            if (err) {
              return;
            }
            if (result) {
              var onlineids = [];
              res.forEach(function (element) {
                onlineids.push(element.dbid);
              });
                Clients.find({ curid: resp.clid }).exec(function (err, reslt) {
                  if (err) {
                    return;
                  }
                  if (reslt) {
                    //
                    result.forEach(function (element) {
                      if(element.notifyAmount) {
                        if (count == element.notifyAmount && element.notifyAmount != 0) {
                          if(resp.client_database_id != element.tsUserId && onlineids.indexOf(element.tsUserId) == -1) {
                            // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
                            bot.sendMessage(element.tgUserId, "üîï *–û–Ω–ª–∞–π–Ω*: –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –º–µ–Ω—å—à–µ " + element.notifyAmount + " —á–µ–ª–æ–≤–µ–∫(–∞)", opts);
                          }
                        }
                      }
                    });
                    //
                    reslt.forEach(function (unit) {
                      Subscriptions.find({ $or: [{ tsIds: unit.dbid }, { notifyAll: true }, { notifyAll: false }] }).exec(function (error, result) {
                        if (error) {
                          aareturn;
                        }
                        if (result) {
                          result.forEach(function (element) {
                            if (element.notifyAll == false) {
                                // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
                                if (element.tsIds.indexOf(unit.dbid) != -1) {
                                  if(resp.client_database_id != element.tsUserId && onlineids.indexOf(element.tsUserId) == -1) {
                                    switch (resp.reasonid) {
                                      case 3:
                                        bot.sendMessage(element.tgUserId, "‚úñÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –ø–æ—Ç–µ—Ä—è–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º..", opts);
                                        break;
                                      case 5:
                                        if(resp.reasonmsg) {
                                          bot.sendMessage(element.tgUserId, "‚ö†Ô∏è *" + unit.name + "*(id" + unit.dbid + ") –∫–∏–∫–Ω—É—Ç *" + resp.invokername + "*(id" + resp.invokerid + "), –ø—Ä–∏—á–∏–Ω–∞: _" + resp.reasonmsg + "_", opts);
                                        } else {
                                          bot.sendMessage(element.tgUserId, "‚ö†Ô∏è *" + unit.name + "*(id" + unit.dbid + ") –∫–∏–∫–Ω—É—Ç *" + resp.invokername + "*(id" + resp.invokerid + ") –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", opts);
                                        }
                                        break;
                                      case 6:
                                        if(resp.reasonmsg) {
                                          bot.sendMessage(element.tgUserId, "‚ùóÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –∑–∞–±–∞–Ω–µ–Ω *" + resp.invokername + "*(id" + resp.invokerid + ") –Ω–∞ " + resp.bantime + " —Å–µ–∫, –ø—Ä–∏—á–∏–Ω–∞: _" + resp.reasonmsg + "_", opts);
                                        } else {
                                          bot.sendMessage(element.tgUserId, "‚ùóÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –∑–∞–±–∞–Ω–µ–Ω *" + resp.invokername + "*(id" + resp.invokerid + ") –Ω–∞ " + resp.bantime + " —Å–µ–∫ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", opts);
                                        }
                                        break;
                                      case 8:
                                        bot.sendMessage(element.tgUserId, "‚ûñ *" + unit.name + "*(id" + unit.dbid + ") –≤—ã—à–µ–ª :—Å", opts);
                                        break;
                                      case 11:
                                        bot.sendMessage(element.tgUserId, "‚úñÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", opts);
                                        break;
                                      default:
                                        bot.sendMessage(element.tgUserId, "‚ûñ *" + unit.name + "*(id" + unit.dbid + ") –≤—ã—à–µ–ª :—Å", opts);
                                    }
                                  }
                                }
                            } else {
                              // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                              
                              if (unit.name != '') {
                                if (element.tsIds.indexOf(unit.dbid) == -1) {
                                  if(resp.client_database_id != element.tsUserId && onlineids.indexOf(element.tsUserId) == -1) {
                                    switch (resp.reasonid) {
                                      case 3:
                                        bot.sendMessage(element.tgUserId, "‚úñÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –ø–æ—Ç–µ—Ä—è–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º..", opts);
                                        break;
                                      case 5:
                                        if(resp.reasonmsg) {
                                          bot.sendMessage(element.tgUserId, "‚ö†Ô∏è *" + unit.name + "*(id" + unit.dbid + ") –∫–∏–∫–Ω—É—Ç *" + resp.invokername + "*(id" + resp.invokerid + "), –ø—Ä–∏—á–∏–Ω–∞: _" + resp.reasonmsg + "_", opts);
                                        } else {
                                          bot.sendMessage(element.tgUserId, "‚ö†Ô∏è *" + unit.name + "*(id" + unit.dbid + ") –∫–∏–∫–Ω—É—Ç *" + resp.invokername + "*(id" + resp.invokerid + ") –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", opts);
                                        }
                                        break;
                                      case 6:
                                        if(resp.reasonmsg) {
                                          bot.sendMessage(element.tgUserId, "‚ùóÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –∑–∞–±–∞–Ω–µ–Ω *" + resp.invokername + "*(id" + resp.invokerid + ") –Ω–∞ " + resp.bantime + " —Å–µ–∫, –ø—Ä–∏—á–∏–Ω–∞: _" + resp.reasonmsg + "_", opts);
                                        } else {
                                          bot.sendMessage(element.tgUserId, "‚ùóÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –∑–∞–±–∞–Ω–µ–Ω *" + resp.invokername + "*(id" + resp.invokerid + ") –Ω–∞ " + resp.bantime + " —Å–µ–∫ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", opts);
                                        }
                                        break;
                                      case 8:
                                        bot.sendMessage(element.tgUserId, "‚ûñ *" + unit.name + "*(id" + unit.dbid + ") –≤—ã—à–µ–ª :—Å", opts);
                                        break;
                                      case 11:
                                        bot.sendMessage(element.tgUserId, "‚úñÔ∏è *" + unit.name + "*(id" + unit.dbid + ") –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", opts);
                                        break;
                                      default:
                                        bot.sendMessage(element.tgUserId, "‚ûñ *" + unit.name + "*(id" + unit.dbid + ") –≤—ã—à–µ–ª :—Å", opts);
                                    }
                                  }
                                }
                              } else {
                                bot.sendMessage(element.tgUserId, "‚ûñ –ö—Ç–æ-—Ç–æ –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ :—Å", opts);
                              }
                            }
                          });
                          if (result.length < 1) bot.sendMessage(element.tgUserId, "‚ûñ –ö—Ç–æ-—Ç–æ –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ :—Å", opts);
                        }
                        userLeft(resp);
                      });
                    });
                  }
                });
            }
          });
        }
      });
    });

  }

  const MONTH_NAMES = [
    '–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è',
    '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è', '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è'
  ];
  
  
  function getFormattedDate(date, prefomattedDate = false, hideYear = false) {
    const day = date.getDate();
    const month = MONTH_NAMES[date.getMonth()];
    const year = date.getFullYear();
    const hours = date.getHours();
    let minutes = date.getMinutes();
  
    if (minutes < 10) {
      // Adding leading zero to minutes
      minutes = `0${ minutes }`;
    }
  
    if (prefomattedDate) {
      // Today at 10:20
      // Yesterday at 10:20
      return `${ prefomattedDate } –≤ ${ hours }:${ minutes }`;
    }
  
    if (hideYear) {
      // 10. January at 10:20
      return `${ day } ${ month } –≤ ${ hours }:${ minutes }`;
    }
  
    // 10. January 2017. at 10:20
    return `${ day } ${ month } ${ year }. –≤ ${ hours }:${ minutes }`;
  }
  // --- Main function
  function timeAgo(dateParam) {
    if (!dateParam) {
      return null;
    }
  
    const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam);
    const DAY_IN_MS = 86400000; // 24 * 60 * 60 * 1000
    const today = new Date();
    const yesterday = new Date(today - DAY_IN_MS);
    const seconds = Math.round((today - date) / 1000);
    const minutes = Math.round(seconds / 60);
    const hours = Math.round(minutes / 60);
    const days = Math.round(hours / 24);
    const isToday = today.toDateString() === date.toDateString();
    const isYesterday = yesterday.toDateString() === date.toDateString();
    const isThisYear = today.getFullYear() === date.getFullYear();
  
  
    if (seconds < 5) {
      return `—Ç–æ–ª—å–∫–æ —á—Ç–æ`;
    } else if (seconds < 60) {
      return `${ seconds } —Å–µ–∫. –Ω–∞–∑–∞–¥`;
    } else if (seconds < 90) {
      return '–º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥';
    } else if (minutes < 60) {
      return `${ minutes } –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else if (hours < 2) {
      return `${ hours } —á–∞—Å –Ω–∞–∑–∞–¥`;
    } else if (hours < 24) {
      return `${ hours } —á–∞—Å. –Ω–∞–∑–∞–¥`;
    } else if (days < 2) {
      return `${ days } –¥–µ–Ω—å –Ω–∞–∑–∞–¥`;
    } else if (days < 7) {
      return `${ days } –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else if (isThisYear) {
      return getFormattedDate(date, false, true); // 10. January at 10:20
    }
  
    return getFormattedDate(date); // 10. January 2017. at 10:20
  }
}

var listener = new TeamSpeakListener();

//# sourceMappingURL=main-compiled.js.map