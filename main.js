'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TeamSpeakListener = TeamSpeakListener;
function TeamSpeakListener() {
  'use strict';

  var TeamSpeakClient = require("node-teamspeak"), util = require("util");;
  var TelegramBot = require('node-telegram-bot-api');
  var mongoose = require('mongoose');
  var fs = require('fs');

  var parsedJson = JSON.parse(fs.readFileSync('settings.json', 'utf8'));
  var helpText = "made by @proxwian";

  var connectText = "[–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É](http://www.teamspeak.com/invite/teamsp3ak.ru/)";

  var server = parsedJson.server;
  var port = parsedJson.port;
  var queryPort = parsedJson.queryPort;

  // –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
  // 
  var clients = [];

  var cl = new TeamSpeakClient(server, queryPort);
  setHandlers();

  function setHandlers() {
    cl.on("error", function (err) {
      cl = new TeamSpeakClient(server, queryPort);
      setHandlers();
      serverNotifyRegister();
      handleEvents();
    });

    cl.on("close", function () {
      cl = new TeamSpeakClient(server, queryPort);
      setHandlers();
      serverNotifyRegister();
      handleEvents();
    });
  }
  var bot = new TelegramBot(parsedJson.botApiKey, { polling: true });

  var subsSchema = new mongoose.Schema({
    "tgUserId": { type: String, index: true },
    "tsUserId": { type: Number },
    "notifyAll": { type: Boolean, default: false },
    "notifyAmount": { type: Number },
    "tsIds": [Number]
  });
  var Subscriptions = mongoose.model('Subscriptions', subsSchema);

  var clientsSchema = new mongoose.Schema({
    "dbid": { type: Number, index: true },
    "curid": { type: Number },
    "power": { type: Number },
    "channel": { type: Number },
    "name": { type: String },
    "online": { type: String },
    "country": { type: String },
    "awayMsg": { type: String }
  });
  var Clients = mongoose.model('bros', clientsSchema);

  const opts = {
    parse_mode: 'Markdown',
    reply_markup: JSON.stringify({
      keyboard: [
        ['üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', 'üëΩ –û–Ω–ª–∞–π–Ω', 'üìú –ö–∞—Ä—Ç–∞'],
        ['üñç –ü–æ–¥–ø–∏—Å–∫–∏', 'üìç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
        ['üëÅ –†–µ–∂–∏–º', 'üëé –ë–ª—ç–∫–ª–∏—Å—Ç', 'üëç –í–∞–π—Ç–ª–∏—Å—Ç']
      ]
    })
  };

  mongoose.connect(parsedJson.mongooseConnection);
  var db = mongoose.connection;
  db.on('error', console.error.bind(console, 'connection error:'));

  db.once('open', function () {
    bot.onText(/\/start/, function (msg) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { tgUserId: msg.from.id }, { upsert: true }, function (err, result) {
        if (result) {
          bot.sendMessage(msg.from.id, helpText, opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram', opts);
        }
      });
    });

    bot.onText(/\/stop|\/stahp/, function (msg) {
      Subscriptions.remove({ tgUserId: msg.from.id }, function (err) {
        if (!err) {
          bot.sendMessage(msg.from.id, '–û–∫, –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–µ–Ω—è)', opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', opts);
        }
      });
    });

    bot.on('callback_query', function onCallbackQuery(callbackQuery) {
      const action = callbackQuery.data;
      const msg = callbackQuery.message;
      const opts = {
          chat_id: msg.chat.id,
          message_id: msg.message_id,
        };
      let text;
      if (action === 'edit') {
          text = 'Edited Text';
        }
      bot.editMessageText(text, opts);
    });

    bot.onText(/\/help/, function (msg) {
      bot.sendMessage(msg.chat.id, helpText, opts);
    });

    bot.onText(/\/connect|üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è$/, function (msg) {
      bot.sendMessage(msg.chat.id, connectText, opts);
    });

    bot.onText(/\/who$|\/list$|üëΩ –û–Ω–ª–∞–π–Ω/, function (msg) {
      var strlist = '';
      Clients.find({ online: "true" }).exec(function (err, result) {
        if (err) {
          return;
        } if (result) {
          var count = 0;
          result.sort(function(a, b){ return a.dbid-b.dbid });
          result.forEach(function (element) {
            count++;
            strlist += "id" + element.dbid + ": " + element.name + " \\[" + element.power + "\]";
            if (count != result.length) strlist += "\n";
          });
          var str = '';
          switch(count) {
            case 2:
              str = ' —á–µ–ª–æ–≤–µ–∫–∞';
              break;
            case 3:
              str = ' —á–µ–ª–æ–≤–µ–∫–∞';
              break;
            case 4:
              str = ' —á–µ–ª–æ–≤–µ–∫–∞';
              break;
            default:
              str = ' —á–µ–ª–æ–≤–µ–∫';
            }
          if (count > 0) {
            bot.sendMessage(msg.chat.id, "–°–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ " + count + str +":\n\n" + strlist, opts);
          } else {
            bot.sendMessage(msg.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –æ–Ω–ª–∞–π–Ω –Ω–µ—Ç...", opts);
          }
        }
      });
    });

    bot.onText(/\/whoall|\/listall|üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/, function (msg) {
      var strlist = '';
      var i = 0;
      Clients.find().exec(function (err, result) {
          if (err) {
            bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î *_*");
            return;
          } if (result) {
            result.sort(function(a, b){ return a.dbid-b.dbid });
            result.forEach(function (element) {
              if (element.dbid == null) return;
              i++;
              strlist += "id" + element.dbid + ": " + element.name + " \\[" + element.power + "\]";
              switch (element.online) {
                case 'true':
                  strlist += " (–û–Ω–ª–∞–π–Ω)";
                  break;
                default:
                  strlist += " (" + timeAgo(element.online) + ")";
              }
              if (i != result.length) strlist += "\n";
            });
            bot.sendMessage(msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (" + i + "): \n\n" + strlist, opts);
          }
        });
    });

    bot.onText(/\/info (.+)|\/online (.+)/, function (msg, args) {
      Clients.find({ name: args[1].valueOf() }).exec(function (err, result) {
          if (err) {
            bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞ *_*", opts);
            return;
          } if (result) {
            result.forEach(function (element) {
              var str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + element.name + '(id' + element.dbid + ')';
              switch (element.online) {
                case 'true':
                  str += " —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω";
                  break;
                default:
                  str += " –±—ã–ª –æ–Ω–ª–∞–π–Ω " + timeAgo(element.online);
              }
              bot.sendMessage(msg.chat.id, str, opts);
            });
            if (result.length < 1) {
              Clients.find({ dbid: args[1] }).exec(function (err, result) {
                if (err) {
                  bot.sendMessage(msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –∏–ª–∏ id –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å", opts);
                  return;
                } if (result) {
                  result.forEach(function (element) {
                    var str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + element.name + '(id' + element.dbid + ')';
                    switch (element.online) {
                      case 'true':
                        str += " —Å–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω";
                        break;
                      default:
                        str += " –±—ã–ª –æ–Ω–ª–∞–π–Ω " + timeAgo(element.online);
                    }
                    bot.sendMessage(msg.chat.id, str, opts);
                  });
                  if (result.length < 1) bot.sendMessage(msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –∏–ª–∏ id –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å", opts);
                }
              });
            }
          }
      });
    });

    bot.onText(/\/tree$|\/map$|üìú –ö–∞—Ä—Ç–∞$/, function (msg) {
      updatePositions();

      var tree = '';
      cl.send("use", {sid: 1}, function(err, resp, rawResponse){
        cl.send("channellist", function(err, resp, rawResponse){
          Clients.find({ online: "true" }).exec(function (err, clientList) {
            if (err) {
              return;
            } if (clientList) {
              //clientList.sort(function(a, b){ return a.power-b.power });
  
              resp.forEach(function(element) {
                var count = 0;
                var stroke = '';
                var ch_clients = [];
    
                function getChClients(e) {
                  return e.channel == element.cid;
                }
    
                ch_clients = clientList.filter(getChClients);
                //ch_clients = clientList;

                if(!element.channel_name.includes("#") && element.channel_needed_subscribe_power < 999) {
                  stroke += "\\_\\_";
                }

                ch_clients.forEach(function(client) {
                  count++;
                });
    
                // —Å–∫—Ä—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
                if (element.total_clients < 0) {
                  if (element.channel_needed_subscribe_power < 999) {
                    if (element.channel_needed_subscribe_power < 80) {
                      stroke += "*" + element.channel_name + "* (?)\n";
                    } else {
                      stroke += "*" + element.channel_name + "*\n";
                    }
                  }
                } else {
                  stroke += "*" + element.channel_name + "*" + " (" + count + ")\n";
                }
                //

                ch_clients.forEach(function(client) {
                  stroke += "  [ ] _" + client.name + "_ \\[" + client.power + "\]\n";
                });
                tree += stroke;
              })

              bot.sendMessage(msg.chat.id, tree, opts);
            }
          });
        });
      });
    });

    bot.onText(/\/whitelist|\/unsubscribeall|üëç –í–∞–π—Ç–ª–∏—Å—Ç/, function (msg) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { notifyAll: false }, function (err, result) {
        if (result) {
          bot.sendMessage(msg.from.id, '–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –≤–∞–π—Ç-–ª–∏—Å—Ç–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã', opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', opts);
        }
      });
    });

    bot.onText(/\/blacklist|\/subscribeall|üëé –ë–ª—ç–∫–ª–∏—Å—Ç/, function (msg) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { notifyAll: true }, function (err, result) {
        if (result) {
          bot.sendMessage(msg.from.id, '–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ —Ç–µ—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã', opts);
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', opts);
        }
      });
    });

    bot.onText(/\/sub (.+)/, function (msg, args) {
      Clients.find({ name: args[1].valueOf() }).exec(function (e, r) {
        if (e) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
        }
        if (r) {
          var user;
            switch (r.length) {
              case 1:
                user = r[0];
                Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $addToSet: { tsIds: user.dbid } }, function (er, res) {
                  if (er) {
                    bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                  }
                  if (res) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + user.name + '(id' + user.dbid + ') –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏', opts);
                  }
                });
                break;
              default:
                Clients.find({ dbid: args[1].valueOf() }).exec(function (err, result) {
                  if (err) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω...', opts);
                  }
                  if (result) {
                    if (result.length) {
                      if (result.length < 1) {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                      } else {
                        user = result[0];
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $addToSet: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + user.name + '(id' + user.dbid + ') –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏', opts);
                          }
                        });
                      }
                    } else {
                      user = result;
                      if (user.dbid != null && user.dbid != undefined) {
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $addToSet: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aga)', opts);
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + user.name + '(id' + user.dbid + ') –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏', opts);
                          }
                        });
                      } else {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                      }
                    }
                  }
                });
            }
        }
      });
    });

    bot.onText(/\/subscribe$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /subscribe', opts);
    });

    bot.onText(/\/sub$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /sub', opts);
    });

    bot.onText(/\/me (.+)/, function (msg, args) {
      Clients.find({ name: args[1].valueOf() }).exec(function (e, r) {
        if (e) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
        }
        if (r) {
          var user;
            switch (r.length) {
              case 1:
                user = r[0];
                Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { tsUserId: user.dbid } }, function (er, res) {
                  if (er) {
                    bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                  }
                  if (res) {
                    bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user.name + '(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω', opts);
                  }
                });
                break;
              default:
                Clients.find({ dbid: args[1].valueOf() }).exec(function (err, result) {
                  if (err) {
                    bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user.name + '(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω');
                  }
                  if (result) {
                    if (result.length) {
                      if (result.length < 1) {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å');
                      } else {
                        user = result[0];
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { tsUserId: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user.name + '(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω');
                          }
                        });
                      }
                    } else {
                      user = result;
                      if (user.dbid != null && user.dbid != undefined) {
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { tsUserId: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aga)');
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + user.name + '(id' + user.dbid + ') –∫–∞–∫ –ª–∏—á–Ω—ã–π. –í–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ–Ω–ª–∞–π–Ω');
                          }
                        });
                      } else {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å');
                      }
                    }
                  }
                });
            }
        }
      });
    });

    bot.onText(/\/unsub (.+)/, function (msg, args) {
      Clients.find({ name: args[1].valueOf() }).exec(function (e, r) {
        if (e) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
        }
        if (r) {
          var user;
            switch (r.length) {
              case 1:
                user = r[0];
                Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $pull: { tsIds: user.dbid } }, function (er, res) {
                  if (er) {
                    bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', opts);
                  }
                  if (res) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + user.name + '(id' + user.dbid + ') —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫', opts);
                  }
                });
                break;
              default:
                Clients.find({ dbid: args[1].valueOf() }).exec(function (err, result) {
                  if (err) {
                    bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω...', opts);
                  }
                  if (result) {
                    if (result.length) {
                      if (result.length < 1) {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å', opts);
                      } else {
                        user = result[0];
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $pull: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + user.name + '(id' + user.dbid + ') —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫');
                          }
                        });
                      }
                    } else {
                      user = result;
                      if (user.dbid != null && user.dbid != undefined) {
                        Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $pull: { tsIds: user.dbid } }, function (er, res) {
                          if (er) {
                            bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (aga)');
                          }
                          if (res) {
                            bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + user.name + '(id' + user.dbid + ') —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫');
                          }
                        });
                      } else {
                        bot.sendMessage(msg.from.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º –∏–ª–∏ id ' + args[1] + ' –Ω–µ –Ω–∞–π–¥–µ–Ω :—Å');
                      }
                    }
                  }
                });
            }
        }
      });
    });

    bot.onText(/\/unsubscribe$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unsubscribe', opts);
    });
  
    bot.onText(/\/unsub$/, function (msg) {
      bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unsub', opts);
    });
  
    bot.onText(/\/notify$|üìç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/, function (msg) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { notifyAmount: 0 } }, function (error, result) {
        if (error) {
          bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞ –ë–î', opts);
        }
        if (result) {
          bot.sendMessage(msg.from.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω—ã', opts);
        }
      });
    });
  
    bot.onText(/\/notify (.+)/, function (msg, args) {
      Subscriptions.findOneAndUpdate({ tgUserId: msg.from.id }, { $set: { notifyAmount: args[1] } }, function (error, result) {
        if (error) {
          bot.sendMessage(msg.from.id, '–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ', opts);
        }
        if (result) {
          bot.sendMessage(msg.from.id, '–•–æ—Ä–æ—à–æ, —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ–Ω–ª–∞–π–Ω–µ, –∫–æ–≥–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ ' + args[1] + ' —á–µ–ª–æ–≤–µ–∫(–∞)', opts);
        }
      });
    });
  
    bot.onText(/\/mode$|üëÅ –†–µ–∂–∏–º/, function (msg) {
      Subscriptions.findOne({ tgUserId: msg.from.id }, function (err, result) {
        if (result) {
          (function () {
            if (result.notifyAll == true) {
              bot.sendMessage(msg.from.id, '–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ —Ç–µ—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã', opts);
            } else {
              bot.sendMessage(msg.from.id, '–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –≤–∞–π—Ç-–ª–∏—Å—Ç–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã', opts);
            }
          })();
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î', opts);
        }
      });
    });
  
    bot.onText(/\/subscriptions*|üñç –ü–æ–¥–ø–∏—Å–∫–∏/, function (msg) {
      Subscriptions.findOne({ tgUserId: msg.from.id }, function (err, result) {
        if (result) {
          Clients.find().exec(function (er, res) {
            if (er) {
  
            }
            if (res) {
              var subscriptions = "";
              var i = 1;
              result.tsIds.forEach(function (element) {
                var name = '';
                res.forEach(function (unit) {
                  if (unit.dbid == element) {
                    name = unit.name;
                  }
                });
                subscriptions = subscriptions + i + ") id" + element + ": " + name + "\n";
                i++;
              });
              if (subscriptions) {
                if (result.notifyAll) {
                  bot.sendMessage(msg.from.id, '–ü–æ–¥–ø–∏—Å–∫–∏ (—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫):  \n' + subscriptions, opts);
                } else {
                  bot.sendMessage(msg.from.id, '–ü–æ–¥–ø–∏—Å–∫–∏ (–≤–∞–π—Ç-–ª–∏—Å—Ç):  \n' + subscriptions, opts);
                }
              } else {
                bot.sendMessage(msg.from.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ :—Å', opts);
              }
            }
          });
        }
        if (err) {
          bot.sendMessage(msg.from.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î');
        }
      });
    });
  });

  serverNotifyRegister();
  handleEvents();
  getClientList();

  function serverNotifyRegister() {
    cl.send("use", { port: port || 9987 }, function () {
      cl.send("servernotifyregister", { event: "server" }, function () {});
      cl.send("servernotifyregister", { event: "textprivate" }, function () {});
      cl.send("servernotifyregister", { event: "clientmove" }, function () {});
      cl.send("servernotifyregister", { event: "clientmoved" }, function () {});
    });
  }

  function userJoin(resp) {
    Clients.findOneAndUpdate({ dbid: resp.client_database_id }, { $set: { curid: resp.clid, name: resp.client_nickname, online: 'true', country: resp.client_country, power: resp.client_talk_power, channel: resp.ctid, awayMsg: resp.client_away_message } }, { upsert: true }, function (err, result) {
      });
  }

  function userLoad(resp) {
    Clients.findOneAndUpdate({ dbid: resp.client_database_id }, { $set: { curid: resp.clid, name: resp.client_nickname, online: 'true' } }, { upsert: true }, function (err, result) {
      });
  }

  function userUpdate(resp) {
    Clients.findOneAndUpdate({ dbid: resp.client_database_id }, { $set: { channel: resp.cid } }, { upsert: true }, function (err, result) {
      });
  }

  function userLeft(resp) {
    Clients.findOneAndUpdate({ curid: resp.clid }, { $set: { online: new Date(), curid: null } }, function (err, result) {
      });
  }

  function getClientList() {
    clients = [];
    cl.send("use", {sid: 1}, function(err, resp, rawResponse){
      cl.send("clientlist", function(err, resp, rawResponse){
        if (Array.isArray(resp)) {
          resp.forEach(function(element) {
            if(element.client_type == 0) {
              userLoad(element);
            }
          });
        } else {
          if(resp.client_type == 0) {
            // // disable adding ServerQuery users
            // user(resp, false);
          }
        }
        });
    });
  }

  function updatePositions() {
    cl.send("use", {sid: 1}, function(err, resp, rawResponse){
      cl.send("clientlist", function(err, resp, rawResponse){
        if (Array.isArray(resp)) {
          resp.forEach(function(element) {
            //if(!element.client_nickname.includes("Unknown from")) {
            if(element.client_type == 0) {
              userUpdate(element);
            }
          });
        } else {
          if(resp.client_type == 0) {
            userUpdate(resp);
          }
        }
      });
    });
  }

  function handleEvents() {
    cl.on("cliententerview", function (resp) {
      //noinspection JSUnresolvedVariable
      Subscriptions.find({ $or: [{ tsIds: resp.client_database_id }, { notifyAll: true }, { notifyAll: false }] }).exec(function (err, result) {
        if (err) {
          return;
        } if (result) {
          result.forEach(function (element) {
            if (element.notifyAll == false) {
                // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
                if (element.tsIds.indexOf(resp.client_database_id) != -1) {
                  bot.sendMessage(element.tgUserId, resp.client_country + ": " + resp.client_nickname + " [" + resp.client_talk_power + "] –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è", opts);
                }
            } else {
              // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
              if (element.tsIds.indexOf(resp.client_database_id) == -1) {
                bot.sendMessage(element.tgUserId, resp.client_country + ": " + resp.client_nickname + " [" + resp.client_talk_power + "] –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è", opts);
              }
            }
          });
        }
        userJoin(resp);
      });
      Clients.find({ online: "true" }).exec(function (err, res) {
        if (err) {
          return;
        } if (res) {
          var count = res.length;
          Subscriptions.find().exec(function (err, result) {
            if (err) {
              return;
            }
            if (result) {
              res.forEach(function (element) {
                result.forEach(function (e) {
                  if (element.tsUserId == e.tsUserId) {
                    return;
                  }
                });
              });
              result.forEach(function (element) {
                if (count >= element.notifyAmount && element.notifyAmount != 0) {
                  // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
                  count++;
                  bot.sendMessage(element.tgUserId, "–û–Ω–ª–∞–π–Ω: –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ " + count + " —á–µ–ª–æ–≤–µ–∫(–∞)", opts);
                }
              });
            }
          });
        }
      });
    });

    cl.on("textmessage", function (resp) {
      if(resp.targetmode == 1) {
        Subscriptions.find({ $and: [{ tsIds: "chat" }, { tsIds: "server" }] }).exec(function (err, result) {
          if (err) {
            return;
          }if (result) {
            result.forEach(function (element) {
              bot.sendMessage(element.tgUserId, resp.msg, opts);
            });
          }
        });
      }
    });

    cl.on("clientmoved", function (resp) {
      Subscriptions.find({ $and: [{ tsIds: "chat" }, { tsIds: "server" }] }).exec(function (err, result) {
        if (err) {
          return;
        }if (result) {
          result.forEach(function (element) {
            bot.sendMessage(element.tgUserId, "clientmoved");
          });
        }
      });
      for (var i = 0; i < clients.length; i++) {
        if (clients[i].id == resp.clid) {
            clients[i].channel = resp.ctidf;
        }
      }
    });

    cl.on("clientleftview", function (resp) {
      //noinspection JSUnresolvedVariable
      Clients.find({ curid: resp.clid }).exec(function (err, res) {
        if (err) {
          return;
        }
        if (res) {
          res.forEach(function (unit) {
            Subscriptions.find({ $or: [{ tsIds: unit.dbid }, { notifyAll: true }, { notifyAll: false }] }).exec(function (error, result) {
              if (error) {
                return;
              }
              if (result) {
                result.forEach(function (element) {
                  if (element.notifyAll == false) {
                      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
                      if (element.tsIds.indexOf(unit.dbid) != -1) {
                        bot.sendMessage(element.tgUserId, unit.name + " –≤—ã—à–µ–ª :—Å", opts);
                      }
                  } else {
                    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    
                    if (unit.name != '') {
                      if (element.tsIds.indexOf(unit.dbid) == -1) {
                        bot.sendMessage(element.tgUserId, unit.name + " –≤—ã—à–µ–ª :—Å", opts);
                      }
                    } else {
                      bot.sendMessage(element.tgUserId, "–ö—Ç–æ-—Ç–æ –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ :—Å", opts);
                    }
                  }
                });
                if (result.length < 1) bot.sendMessage(element.tgUserId, "–ö—Ç–æ-—Ç–æ –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ :—Å", opts);
              }
              userLeft(resp);
            });
          });
        }
      });
    });

  }

  const MONTH_NAMES = [
    '–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è',
    '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è', '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è'
  ];
  
  
  function getFormattedDate(date, prefomattedDate = false, hideYear = false) {
    const day = date.getDate();
    const month = MONTH_NAMES[date.getMonth()];
    const year = date.getFullYear();
    const hours = date.getHours();
    let minutes = date.getMinutes();
  
    if (minutes < 10) {
      // Adding leading zero to minutes
      minutes = `0${ minutes }`;
    }
  
    if (prefomattedDate) {
      // Today at 10:20
      // Yesterday at 10:20
      return `${ prefomattedDate } –≤ ${ hours }:${ minutes }`;
    }
  
    if (hideYear) {
      // 10. January at 10:20
      return `${ day }. ${ month } –≤ ${ hours }:${ minutes }`;
    }
  
    // 10. January 2017. at 10:20
    return `${ day }. ${ month } ${ year }. –≤ ${ hours }:${ minutes }`;
  }
  // --- Main function
  function timeAgo(dateParam) {
    if (!dateParam) {
      return null;
    }
  
    const date = typeof dateParam === 'object' ? dateParam : new Date(dateParam);
    const DAY_IN_MS = 86400000; // 24 * 60 * 60 * 1000
    const today = new Date();
    const yesterday = new Date(today - DAY_IN_MS);
    const seconds = Math.round((today - date) / 1000);
    const minutes = Math.round(seconds / 60);
    const hours = Math.round(minutes / 60);
    const days = Math.round(hours / 24);
    const isToday = today.toDateString() === date.toDateString();
    const isYesterday = yesterday.toDateString() === date.toDateString();
    const isThisYear = today.getFullYear() === date.getFullYear();
  
  
    if (seconds < 5) {
      return `—Ç–æ–ª—å–∫–æ —á—Ç–æ`;
    } else if (seconds < 60) {
      return `${ seconds } —Å–µ–∫. –Ω–∞–∑–∞–¥`;
    } else if (seconds < 90) {
      return '–º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥';
    } else if (minutes < 60) {
      return `${ minutes } –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else if (hours < 2) {
      return `${ hours } —á–∞—Å –Ω–∞–∑–∞–¥`;
    } else if (hours < 24) {
      return `${ hours } —á–∞—Å. –Ω–∞–∑–∞–¥`;
    } else if (days < 2) {
      return `${ days } –¥–µ–Ω—å –Ω–∞–∑–∞–¥`;
    } else if (days < 7) {
      return `${ days } –¥–Ω. –Ω–∞–∑–∞–¥`;
    } else if (isThisYear) {
      return getFormattedDate(date, false, true); // 10. January at 10:20
    }
  
    return getFormattedDate(date); // 10. January 2017. at 10:20
  }

  function dbid(id) {
    if (id == 14) {
      return 1;
    } else {
      return id;
    }
  }
}

var listener = new TeamSpeakListener();

//# sourceMappingURL=main-compiled.js.map